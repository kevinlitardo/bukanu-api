// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ACTIVE_STATUS {
  ACTIVE
  UNACTIVE
}

enum APPOINTMENT_STATUS {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

model user {
  id         String   @id @default(cuid())
  auth_id    String   @unique
  email      String   @unique
  name       String
  last_name  String
  cellphone  String?  @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relaciones
  businesses  business[]    @relation("user_businesses") // due√±o de negocios
  worker_at   worker[] // negocios donde es trabajador
  appointment appointment[]

  @@index([auth_id])
}

model business {
  id            String        @id @default(cuid())
  slug          String        @unique
  name          String        @unique
  phone         String        @unique
  description   String
  address       String
  facebook_url  String?
  instagram_url String?
  tiktok_url    String?
  logo_url      String?
  location_url  String?
  status        ACTIVE_STATUS @default(ACTIVE)

  open_time_weekday  String
  close_time_weekday String
  open_on_saturday   Boolean @default(false)
  open_on_sunday     Boolean @default(false)
  open_time_weekend  String?
  close_time_weekend String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deletedAt  DateTime?

  owner_id String
  owner    user   @relation("user_businesses", fields: [owner_id], references: [id], onDelete: Cascade)

  business_config business_config?
  services        service[]
  workers         worker[]
  appointments    appointment[]

  @@unique([owner_id, name])
  @@index([slug])
  @@index([owner_id])
}

model business_config {
  id          String   @id @default(cuid())
  business_id String   @unique
  business    business @relation(fields: [business_id], references: [id], onDelete: Cascade)

  booking_window_days        Int     @default(30) // ej: 30
  appointment_services_limit Int     @default(1)
  require_deposit            Boolean @default(false)
  deposit_required           Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model service {
  id          String        @id @default(cuid())
  name        String
  description String
  duration    Int
  price       Int
  status      ACTIVE_STATUS @default(ACTIVE)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  business_id String
  business    business @relation(fields: [business_id], references: [id])

  appointment_services appointment_service[]
  worker_service       worker_service[]

  @@unique([business_id, name])
}

model worker {
  id         String        @id @default(cuid())
  status     ACTIVE_STATUS @default(ACTIVE)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  user_id String @unique
  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  business_id String
  business    business @relation(fields: [business_id], references: [id])

  appointments   appointment[]
  schedules      schedule[]
  worker_service worker_service[]
}

model worker_service {
  worker_id  String
  service_id String

  worker  worker  @relation(fields: [worker_id], references: [id], onDelete: Cascade)
  service service @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@id([worker_id, service_id])
}

model schedule {
  id               String        @id @default(cuid())
  status           ACTIVE_STATUS @default(ACTIVE)
  day              Int // 1 = Lunes, 2 = Marter, ..., 7 = Domingo
  start_time       String
  break_start_time String
  break_end_time   String
  end_time         String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  worker_id String
  worker    worker @relation(fields: [worker_id], references: [id], onDelete: Cascade)
}

model appointment {
  id String @id @default(cuid())

  status      APPOINTMENT_STATUS @default(PENDING)
  services    String[]
  date        DateTime
  start_time  DateTime
  end_time    DateTime
  comments    String
  client_name String
  worker_name String
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt
  expires_at  DateTime?

  business_id String
  business    business @relation(fields: [business_id], references: [id])

  worker_id String?
  worker    worker? @relation(fields: [worker_id], references: [id])

  user_id String
  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  appointment_services appointment_service[]

  @@index([worker_id, start_time])
}

model appointment_service {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  appointment_id String
  appointment    appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)

  service_id String
  service    service @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@id([appointment_id, service_id])
}
